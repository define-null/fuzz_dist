defmodule FuzzDist.Jepsen.Antidote do
  @moduledoc """
  An Elixir client for Antidote.
  Implements the operations that are generated by Jepsen during the running of a test.

  - uses Erlang client
  - with `static: true` transactions

  A few misc util functions.

  Function names and `@spec`s are the same as the Jepsen client protocol.
  """

  @behaviour FuzzDist.Jepsen.JepSir

  require Logger

  @g_set_obj {"test_g_set", :antidote_crdt_set_aw, "test_bucket"}

  @impl true
  def g_set_read(antidote_conn) do
    {:ok, static_trans} = :antidotec_pb.start_transaction(antidote_conn, :ignore, static: true)

    {:ok, [g_set]} = :antidotec_pb.read_objects(antidote_conn, [@g_set_obj], static_trans)
    g_set_value = :antidotec_set.value(g_set)

    {:ok, g_set_value}
  end

  @impl true
  def g_set_add(antidote_conn, g_set_value) do
    {:ok, static_trans} = :antidotec_pb.start_transaction(antidote_conn, :ignore, static: true)

    updated_g_set = :antidotec_set.add(g_set_value, :antidotec_set.new())
    updated_ops = :antidotec_set.to_ops(@g_set_obj, updated_g_set)

    :ok = :antidotec_pb.update_objects(antidote_conn, updated_ops, static_trans)
  end

  @impl true
  def setup_primary(antidote_conn, nodes) do
    # create a # nodes * dc1n1 cluster
    long_names =
      Enum.map(nodes, fn <<"n", num::binary>> ->
        "antidote" <> "@" <> "192.168.122.10" <> num
      end)

    Logger.debug("DB setup_primaries(#{inspect(long_names)}) on #{inspect(antidote_conn)}")

    nodes_to_conns =
      Enum.reduce(
        long_names,
        %{},
        fn antidote_node, acc ->
          [_name, host] = String.split(antidote_node, "@")

          {:ok, antidote_conn} = :antidotec_pb_socket.start_link(String.to_charlist(host), 8087)

          Map.put(acc, antidote_node, antidote_conn)
        end
      )

    dcs =
      Enum.map(
        long_names,
        fn antidote_node ->
          :ok = :antidotec_pb_management.create_dc(nodes_to_conns[antidote_node], [antidote_node])
          antidote_node
        end
      )

    cluster =
      Enum.map(
        dcs,
        fn dc ->
          {:ok, descriptor} =
            :antidotec_pb_management.get_connection_descriptor(nodes_to_conns[dc])

          descriptor
        end
      )

    Enum.each(
      dcs,
      fn dc ->
        :ok = :antidotec_pb_management.connect_to_dcs(nodes_to_conns[dc], cluster)
      end
    )

    Enum.each(
      Map.to_list(nodes_to_conns),
      fn {_node, conn} ->
        :ok = :antidotec_pb_socket.stop(conn)
      end
    )

    Logger.debug("Db.setup_primary :ok")

    :ok
  end
end
